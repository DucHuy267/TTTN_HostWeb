const order = require('../models/orderModel');
const product = require('../models/productModel');
const user = require('../models/userModel'); 
// const tf = require('@tensorflow/tfjs');
const tf = require('@tensorflow/tfjs-node');
console.log('dmf',tf.getBackend()); // N√™n in ra "tensorflow"

// T·∫£i d·ªØ li·ªáu t·ª´ database
async function loadData() {
    try {
        const orders = await order.find();
        const products = await product.find();
        const users = await user.find();
        return { orders, products, users };
    } catch (error) {
        console.error('L·ªói khi t·∫£i d·ªØ li·ªáu:', error);
        throw error;
    }
}

// T·∫°o ma tr·∫≠n ng∆∞·ªùi d√πng - s·∫£n ph·∫©m t·ª´ ƒë∆°n h√†ng
// vd matrix[0][2] = 5 // nghƒ©a l√† user 0 ƒë√£ mua 5 s·∫£n ph·∫©m s·ªë 2
function createUserProductMatrix(orders, users, products) {
    const matrix = Array(users.length).fill(null).map(() => Array(products.length).fill(0));

    orders.forEach(order => {
        const userIndex = users.findIndex(user => String(user.id) === String(order.userId));
        order.products.forEach(p => {
            const productIndex = products.findIndex(product => String(product.id) === String(p.productId));
            if (userIndex !== -1 && productIndex !== -1) {
                matrix[userIndex][productIndex] += p.quantity;
            }
        });
    });

    return matrix;
}

// Chu·∫©n h√≥a ma tr·∫≠n (Chu·∫©n h√≥a c√°c gi√° tr·ªã v·ªÅ kho·∫£ng t·ª´ 0 ƒë·∫øn 1 ƒë·ªÉ m√¥ h√¨nh d·ªÖ h·ªçc.)
function normalizeMatrix(matrix) {
    const maxValue = Math.max(...matrix.flat());
    return matrix.map(row => row.map(value => value / maxValue));
}

// Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
function preprocessData(data) {
    const { orders, users, products } = data;
    const userProductMatrix = createUserProductMatrix(orders, users, products);
    const normalizedMatrix = normalizeMatrix(userProductMatrix);
    return { normalizedMatrix, orders, users, products };
}

// Chia d·ªØ li·ªáu th√†nh t·∫≠p hu·∫•n luy·ªán (80%) v√† ki·ªÉm tra (20%)
function splitData(matrix) {
    const trainData = [];
    const trainLabels = [];
    const testData = [];
    const testLabels = [];

    matrix.forEach((row, rowIndex) => {
        row.forEach((value, colIndex) => {
            if (Math.random() < 0.8) { 
                trainData.push([rowIndex, colIndex]);
                trainLabels.push(value);
            } else { 
                testData.push([rowIndex, colIndex]);
                testLabels.push(value);
            }
        });
    });

    return { trainData, trainLabels, testData, testLabels };
}

// X√¢y d·ª±ng m√¥ h√¨nh Deep Matrix Factorization
function buildModel(numUsers, numProducts) {
    const userInput = tf.input({ shape: [1], dtype: 'int32' });
    const productInput = tf.input({ shape: [1], dtype: 'int32' });

    // S·ª≠ d·ª•ng embedding chuy·ªÉn ID (d·∫°ng s·ªë nguy√™n) nh∆∞ userId, productId th√†nh vector nhi·ªÅu chi·ªÅu ( 50 chi·ªÅu )
    const userEmbedding = tf.layers.embedding({ inputDim: numUsers, outputDim: 50 }).apply(userInput);
    const productEmbedding = tf.layers.embedding({ inputDim: numProducts, outputDim: 50 }).apply(productInput);

    // l√†m ph·∫≥ng bi·∫øn tensor nhi·ªÅu chi·ªÅu ‚Üí m·ªôt chi·ªÅu
    const userVec = tf.layers.flatten().apply(userEmbedding);
    const productVec = tf.layers.flatten().apply(productEmbedding);

    // Concatenate Layers gh√©p vector c·ªßa user v√† product th√†nh 1 vector chung.
    // s·ª≠ d·ª•ng c√°c l·ªõp Dense (fully connected) ƒë·ªÉ h·ªçc c√°c ƒë·∫∑c tr∆∞ng ph·ª©c t·∫°p h∆°n t·ª´ d·ªØ li·ªáu.
    const concat = tf.layers.concatenate().apply([userVec, productVec]);
    const dense1 = tf.layers.dense({ units: 128, activation: 'relu' }).apply(concat);
    const dense2 = tf.layers.dense({ units: 64, activation: 'relu' }).apply(dense1);
    const output = tf.layers.dense({ units: 1 }).apply(dense2);

    const model = tf.model({ inputs: [userInput, productInput], outputs: output });
    model.compile({ optimizer: 'adam', loss: 'meanSquaredError' });

    return model;
}

// Hu·∫•n luy·ªán m√¥ h√¨nh
async function trainModel(model, data) {
    const { normalizedMatrix } = data;
    const { trainData, trainLabels, testData, testLabels } = splitData(normalizedMatrix);

    const userTrainTensor = tf.tensor1d(trainData.map(d => d[0]), 'int32');
    const productTrainTensor = tf.tensor1d(trainData.map(d => d[1]), 'int32');
    const trainLabelsTensor = tf.tensor1d(trainLabels);

    const userTestTensor = tf.tensor1d(testData.map(d => d[0]), 'int32');
    const productTestTensor = tf.tensor1d(testData.map(d => d[1]), 'int32');
    const testLabelsTensor = tf.tensor1d(testLabels);

    const startTime = Date.now();

    await model.fit([userTrainTensor, productTrainTensor], trainLabelsTensor, {
        epochs: 10,
        batchSize: 32,
        validationData: [[userTestTensor, productTestTensor], testLabelsTensor],
    });

    const endTime = Date.now();
    console.log(`Th·ªùi gian hu·∫•n luy·ªán: ${(endTime - startTime) / 1000} gi√¢y`);


    // Gi·∫£i ph√≥ng b·ªô nh·ªõ ƒë·ªÉ tr√°nh memory leak
    userTrainTensor.dispose();
    productTrainTensor.dispose();
    trainLabelsTensor.dispose();
    userTestTensor.dispose();
    productTestTensor.dispose();
    testLabelsTensor.dispose();
}

// D·ª± ƒëo√°n 10 s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t
// H√†m n√†y s·∫Ω nh·∫≠n v√†o userId v√† tr·∫£ v·ªÅ 10 s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t cho ng∆∞·ªùi d√πng ƒë√≥.
async function predictTopProducts(userId, model, data) {
    const { products, users } = data;
    
    const userIndex = users.findIndex(user => String(user.id) === String(userId));
    if (userIndex === -1) {
        throw new Error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");
    }

    const userTensor = tf.tensor2d([[userIndex]]); // Chuy·ªÉn userId th√†nh ch·ªâ s·ªë ma tr·∫≠n

    const predictions = await Promise.all(products.map(async (product, productIndex) => {
        const productTensor = tf.tensor2d([[productIndex]]);
        const prediction = model.predict([userTensor, productTensor]);
        const score = (await prediction.data())[0];
        return { product, score };
    }));

    predictions.sort((a, b) => b.score - a.score);
    return predictions.slice(0, 10).map(p => p.product);
}

// H√†m l·∫•y top s·∫£n ph·∫©m ph·ªï bi·∫øn nh·∫•t t·ª´ ƒë∆°n h√†ng n·∫øu user kh√¥ng c√≥ l·ªãch s·ª≠ mua h√†ng
function getPopularProducts(orders, products) {
    const productCount = {};

    // ƒê·∫øm s·ªë l·∫ßn m·ªói s·∫£n ph·∫©m ƒë∆∞·ª£c mua
    orders.forEach(order => {
        order.products.forEach(p => {
            productCount[p.productId] = (productCount[p.productId] || 0) + p.quantity;
        });
    });

    // S·∫Øp x·∫øp s·∫£n ph·∫©m theo s·ªë l·∫ßn mua gi·∫£m d·∫ßn
    return products.sort((a, b) => (productCount[b.id] || 0) - (productCount[a.id] || 0)).slice(0, 10);
}

// API l·∫•y s·∫£n ph·∫©m ƒë·ªÅ xu·∫•t cho ng∆∞·ªùi d√πng
exports.getTopProducts = async (req, res) => {
    try {
        const userId = req.params.userId;
        const data = await loadData();
        const preprocessedData = preprocessData(data);
        const { orders, users, products } = preprocessedData;

        // Ki·ªÉm tra n·∫øu user ch∆∞a mua h√†ng
        const userOrders = orders.filter(order => String(order.userId) === String(userId));
        if (userOrders.length === 0) {
            console.log(`User ${userId} ch∆∞a c√≥ l·ªãch s·ª≠ mua h√†ng. Tr·∫£ v·ªÅ s·∫£n ph·∫©m ph·ªï bi·∫øn nh·∫•t.`);
            const topProducts = getPopularProducts(orders, products);
            return res.json(topProducts);
        }

        // N·∫øu c√≥ l·ªãch s·ª≠, th·ª±c hi·ªán g·ª£i √Ω b·∫±ng m√¥ h√¨nh AI
        const model = buildModel(users.length, products.length);
        await trainModel(model, preprocessedData);
        const topProducts = await predictTopProducts(userId, model, preprocessedData);

        res.json(topProducts);
    } catch (error) {
        console.error('L·ªói x·ª≠ l√Ω y√™u c·∫ßu:', error);
        res.status(500).send('L·ªói m√°y ch·ªß n·ªôi b·ªô');
    }
};

// User m·ªõi ch∆∞a c√≥ l·ªãch s·ª≠ mua h√†ng üëâ nh·∫≠n ƒë∆∞·ª£c top s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t.
// User c√≥ l·ªãch s·ª≠ mua h√†ng üëâ nh·∫≠n ƒë∆∞·ª£c g·ª£i √Ω c√° nh√¢n h√≥a t·ª´ AI.
// M·ªói user s·∫Ω nh·∫≠n ƒë∆∞·ª£c 10 s·∫£n ph·∫©m g·ª£i √Ω d·ª±a tr√™n m√¥ h√¨nh AI Deep Matrix Factorization.
// M√¥ h√¨nh s·∫Ω ƒë∆∞·ª£c hu·∫•n luy·ªán m·ªói khi c√≥ y√™u c·∫ßu t·ª´ client, kh√¥ng c·∫ßn l∆∞u m√¥ h√¨nh v√†o file hay database.
// ƒêi·ªÅu n√†y gi√∫p ti·∫øt ki·ªám b·ªô nh·ªõ v√† ƒë·∫£m b·∫£o m√¥ h√¨nh lu√¥n ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi d·ªØ li·ªáu m·ªõi nh·∫•t.

// l·∫•y t√™n s·∫£n ph·∫©m v√† s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa user
exports.getProductCountInOrders = async (req, res) => {
    try {
        const userId = req.params.userId;
        const orders = await order.find({ userId }).populate('products.productId', 'name '); // L·∫•y t√™n s·∫£n ph·∫©m (v√† gi√° price imageUrl )
        const productCounts = {};

        orders.forEach(order => {
            order.products.forEach(p => {
                if (productCounts[p.productId._id]) {
                    productCounts[p.productId._id].count += p.quantity;
                } else {
                    productCounts[p.productId._id] = { ...p.productId._doc, count: p.quantity };
                }
            });
        });

        res.json(Object.values(productCounts));
    } catch (error) {
        console.error('L·ªói khi l·∫•y s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong ƒë∆°n h√†ng:', error);
        res.status(500).send('L·ªói m√°y ch·ªß n·ªôi b·ªô');
    }
};

// l·∫•y s·ªë l∆∞·ª£ng c·ªßa t·ª´ng s·∫£n ph·∫©m ƒë·∫£ b√°n c·ªßa t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa t·∫•t c·∫£ user
exports.getProductCountInOrdersAll = async (req, res) => {
    try {
        const orders = await order.find().populate('products.productId', 'name '); // L·∫•y t√™n s·∫£n ph·∫©m (v√† gi√° price imageUrl )
        const productCounts = {};

        orders.forEach(order => {
            order.products.forEach(p => {
                if (productCounts[p.productId._id]) {
                    productCounts[p.productId._id].count += p.quantity;
                } else {
                    productCounts[p.productId._id] = { ...p.productId._doc, count: p.quantity };
                }
            });
        });

        res.json(Object.values(productCounts));
    } catch (error) {
        console.error('L·ªói khi l·∫•y s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong ƒë∆°n h√†ng:', error);
        res.status(500).send('L·ªói m√°y ch·ªß n·ªôi b·ªô');
    }
};




